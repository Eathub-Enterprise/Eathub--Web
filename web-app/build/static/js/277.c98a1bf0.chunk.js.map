{"version":3,"file":"static/js/277.c98a1bf0.chunk.js","mappings":"gijWAwBA,EAnBmB,WACf,IAAMA,EAAiB,CACnBC,MAAM,EACNC,UAAU,EACVC,cAAeA,EACfC,iBAAkB,CAChBC,oBAAqB,mBAG7B,OACE,gBAAKC,UAAU,eAAf,UACE,kBAAMA,UAAU,aAAhB,WACA,SAAC,IAAD,CAAQC,QAASP,EAAgBQ,OAAQ,IAAKC,MAAO,OACnD,oEAIP,E,iCC0GD,EArHc,WACZ,OAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eACA,GADA,WACkCA,EAAAA,EAAAA,UAAS,KAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAeG,GAAf,WAGQC,GAASC,EAAAA,EAAAA,IAAuB,aAAc,CACpDC,gBAAgB,IADVF,KAMFG,EAAY,yCAAG,WAAOC,EAAIC,EAAOC,GAAlB,mFACnBP,EAAUM,IACJE,EAAO,IAAIC,UACZC,OAAO,SAAUJ,GAHH,SAMbK,EAAAA,EAAAA,kBAA8BN,EAAIC,EAAOE,GAAMI,MAAK,SAACC,GACzD,GAAIA,EAAU,CAEZ,IAAMC,GAAgB,OAAOhB,GAC7BgB,EAAiBC,OAAOR,EAAO,GAC/BR,EAAae,GACbH,EAAAA,EAAAA,mBACAK,EAAAA,EAAAA,GAAsB,kBAAD,OAAmBV,GAAS,UAClD,MACCW,QAAQC,IAAI,gBACZF,EAAAA,EAAAA,GAAsB,sBAAD,OAAuBV,GAAS,UAExD,IAlBkB,2CAAH,0DA2BlB,OANAa,EAAAA,EAAAA,YAAU,WACJlB,GACFF,EAAaE,EAAKmB,SAAW,GAEhC,GAAE,CAACnB,KAGF,iBAAKR,UAAU,QAAf,WACE,kBAAMA,UAAU,aAAhB,WACE,wCACA,6BACE,iBAAMA,UAAU,aAAhB,UACE,SAAC,KAAD,CAAM4B,GAAG,4BAA4B5B,UAAU,aAA/C,6BAMN,gBAAKA,UAAU,eAAf,UACE,8BACE,4BACE,2BACE,kCACA,+CACA,+CACA,mCACA,wBAGJ,2BACGK,GAAaA,EAAUwB,OAAS,EAC/BxB,EAAUyB,KAAI,SAACC,EAAOjB,GACpB,OAEE,2BAEE,wBACGiB,EAAMC,KAAKC,MAAQ,MAClB,gBAAKC,IAAKC,EAASC,IAAKD,OAG5B,yBACE,uBAAIJ,EAAMC,KAAKK,gBAGjB,yBACE,uBAAIN,EAAMO,OAAOC,cAEnB,yBACE,8BAAMR,EAAMC,KAAKQ,iBAEnB,yBACE,iBAAKxC,UAAU,WAAf,WACE,mBACEyC,QAAS,kBACP9B,EAAaoB,EAAMnB,GAAI,WAAYE,EAD5B,EAGT4B,MAAO,CAAEC,gBAAiB,SAJ5B,qBAQA,mBACEF,QAAS,kBACP9B,EAAaoB,EAAMnB,GAAI,WAAYE,EAD5B,EAGT4B,MAAO,CAAEC,gBAAiB,OAJ5B,4BA3BGZ,EAAMnB,GAuClB,KAED,SAAC,EAAD,aAOb,C,gFCtHYW,EAAwB,SAACqB,EAAMC,GAC1CC,IAAAA,KAAU,CACRF,KAAAA,EACAC,KAAAA,EACAE,UAAW,OACXC,OAAO,EACPC,SAAU,YACVC,mBAAmB,EACnBC,MAAO,IACPC,WAAqB,UAATP,EAAmB,UAAY,UAC3CQ,MAAO,QAEV,C","sources":["Pages/dashboard/pages/order/EmptyOrder.jsx","Pages/dashboard/pages/order/Order.jsx","helper/ToastNotify.js"],"sourcesContent":["import React from \"react\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../../../../Assets/lotties/73982-healthy-or-junk-food.json\";\nimport './order.css'\n\nconst EmptyOrder = () => {\n    const defaultOptions = {\n        loop: true,\n        autoplay: true,\n        animationData: animationData,\n        rendererSettings: {\n          preserveAspectRatio: \"xMidYMid slice\",\n        },\n      };\n  return (\n    <div className=\"menu-section\">\n      <span className=\"empty-menu\">\n      <Lottie options={defaultOptions} height={450} width={450} />\n        <h1>You have no Order Request Currently</h1>\n      </span>\n    </div>\n  );\n};\n\nexport default EmptyOrder;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport authService from \"../../../../services/auth/authService\";\nimport \"./order.css\";\nimport foodImg from \"../../../../Assets/images/foodImg.png\";\nimport Preloader from \"../../../../layouts/Preloader/Preloader\";\nimport EmptyOrder from \"./EmptyOrder\";\nimport { useGetOrderedMealQuery } from \"../../../../model/auth/authServices\";\nimport Swal from \"sweetalert2\";\nimport { showToastNotification } from \"../../../../helper/ToastNotify\";\n\nconst Order = () => {\n  const [loading, setLoading] = useState(true);\n  const [tableData, setTableData] = useState([]);\n  const [status, setStatus] = useState(\"\");\n\n  // using RTK to handle api state\n  const { data } = useGetOrderedMealQuery(\"userOrders\", {\n    refetchOnFocus: true,\n  });\n\n  /* To decide whether to accept or decline\n orders coming through for vendors */\n  const handleStatus = async (id, state, index) => {\n    setStatus(state);\n    const meal = new FormData();\n    meal.append(\"action\", state);\n    // console.log(status);\n\n    await authService.decideOrderStatus(id, state, meal).then((response) => {\n      if (response) {\n        // Remove the row from the table data\n        const updatedTableData = [...tableData];\n        updatedTableData.splice(index, 1);\n        setTableData(updatedTableData);\n        authService.getOrderedMeals();\n        showToastNotification(`Order has been ${state}`, \"success\");\n      } else {\n        console.log(\"Issue here!\");\n        showToastNotification(`Order could not be ${state}`, \"warning\");\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (data) {\n      setTableData(data.results || []);\n    }\n  }, [data]);\n\n  return (\n    <div className=\"order\">\n      <span className=\"order-head\">\n        <h1>Order List</h1>\n        <button>\n          <span className=\"order-link\">\n            <Link to=\"/dashboard/orders/history\" className=\"order-link\">\n              History\n            </Link>\n          </span>\n        </button>\n      </span>\n      <div className=\"orderedTable\">\n        <table>\n          <thead>\n            <tr>\n              <th>Meal</th>\n              <th>Order Description</th>\n              <th>Delivery Location</th>\n              <th>Price</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {tableData && tableData.length > 0 ? (\n              tableData.map((order, index) => {\n                return (\n                  // to improve performance, abstract table below into smaller component\n                  <tr key={order.id}>\n                    {/* convert the src link to image here! */}\n                    <td>\n                      {order.item.image ? null : (\n                        <img src={foodImg} alt={foodImg} />\n                      )}\n                    </td>\n                    <td>\n                      <p>{order.item.food_title}</p>\n                    </td>\n                    {/* This needs to be changed to an accurate Location */}\n                    <td>\n                      <p>{order.client.location}</p>\n                    </td>\n                    <td>\n                      <p> #{order.item.food_price}</p>\n                    </td>\n                    <td>\n                      <div className=\"orderbtn\">\n                        <button\n                          onClick={() =>\n                            handleStatus(order.id, \"accepted\", index)\n                          }\n                          style={{ backgroundColor: \"green\" }}\n                        >\n                          Accept\n                        </button>\n                        <button\n                          onClick={() =>\n                            handleStatus(order.id, \"declined\", index)\n                          }\n                          style={{ backgroundColor: \"red\" }}\n                        >\n                          Decline\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                );\n              })\n            ) : (\n              <EmptyOrder />\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Order;\n","import Swal from \"sweetalert2\";\n\n/**\n * Reusable Notification Bar\n * @param {*} text  the text content\n * @param {*} icon  \"info\" | \"warning\" | \"success\" | \"error\"\n */\n\nexport const showToastNotification = (text, icon) => {\n  Swal.fire({\n    text,\n    icon,\n    iconColor: \"#fff\",\n    toast: true,\n    position: \"top-right\",\n    showConfirmButton: false,\n    timer: 2000,\n    background: icon === \"error\" ? \"#ff0000\" : \"#ff8323\",\n    color: \"#fff\",\n  });\n};\n"],"names":["defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","className","options","height","width","useState","tableData","setTableData","setStatus","data","useGetOrderedMealQuery","refetchOnFocus","handleStatus","id","state","index","meal","FormData","append","authService","then","response","updatedTableData","splice","showToastNotification","console","log","useEffect","results","to","length","map","order","item","image","src","foodImg","alt","food_title","client","location","food_price","onClick","style","backgroundColor","text","icon","Swal","iconColor","toast","position","showConfirmButton","timer","background","color"],"sourceRoot":""}