{"version":3,"file":"static/js/738.cfe757c1.chunk.js","mappings":"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","sources":["Pages/dashboard/pages/menu/AddMenu.jsx","helper/ToastNotify.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./menu.css\";\nimport Preloader from \"../../../../layouts/Preloader/Preloader\";\nimport { Formik } from \"formik\";\nimport { useNavigate } from \"react-router-dom\";\nimport icon from \"../../../../Assets/pngs/ImgUpload.png\";\nimport authService from \"../../../../services/auth/authService\";\nimport { showToastNotification } from \"../../../../helper/ToastNotify\";\nimport * as Yup from \"yup\";\n\nconst AddMenu = () => {\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [category, setCategory] = useState([]);\n  const [file, setFile] = useState(null);\n  const [isImageUploaded, setIsImageUploaded] = useState(false);\n  const [showImage, setShowImage] = useState(false);\n\n  // handling the formats of the image to be uploaded\n  const SUPPORTED_FORMATS = [\"image/jpg\", \"image/jpeg\", \"image/png\"];\n  // handles the image upload itself\n  const handleImageUpload = (event) => {\n    setIsImageUploaded(true);\n    // this previews the image\n    setShowImage(true);\n    setFile(event.target.files[0]);\n    // console.log(event.target.files[0]);\n  };\n\n  useEffect(() => {\n    async function fetchCategory() {\n      setLoading(true);\n      try {\n        const response = await authService.getMealCategory();\n        setCategory(response.data);\n      } catch (err) {\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchCategory(); // fetches the meal category for meal creation\n  }, []);\n\n  // unclear why i had to do this.\n  if (loading && category.length === 0) {\n    return <Preloader />;\n  }\n\n  return (\n    <Formik\n      initialValues={{\n        category_id: \"\",\n        food_title: \"\",\n        food_description: \"\",\n        food_price: \"\",\n        food_type: \"\",\n        prepare_time: \"\",\n        delivery_type: \"\",\n        image: \"\",\n      }}\n      onSubmit={async (values, { setSubmitting }) => {\n        setSubmitting(true);\n        // as requested from backend, formData had to be used.\n        const formData = new FormData();\n        formData.append(\"food_title\", values.food_title);\n        formData.append(\"food-type\", values.food_type);\n        formData.append(\"food_price\", values.food_price);\n        formData.append(\"image\", file);\n        formData.append(\"food_description\", values.food_description);\n        formData.append(\"prepare_time\", values.prepare_time);\n        formData.append(\"delivery_type\", values.delivery_type);\n        formData.append(\"category_id\", values.category_id);\n        /* Note: In the case where multiple Images would be needed, \n          ensure to append to formData instead of destructuring.*/\n        try {\n          const response = await authService.createMeal(formData);\n          // console.log(\"it Worked!\", formData);\n          setLoading(true);\n          authService.getMealList();\n          if (response) {\n            navigate(\"/dashboard/menu\");\n            showToastNotification(\n              `${values.food_title} has been created!`,\n              \"success\"\n            );\n          } else {\n            showToastNotification(\n              `Error in creating ${values.food_title}`,\n              \"error\"\n            );\n            console.log(\"Meal has a bug!\");\n          }\n        } catch (error) {\n          showToastNotification(\n            \"An error occurred while creating the meal\",\n            \"error\"\n          );\n        } finally {\n          setLoading(false);\n        }\n      }}\n      validationSchema={Yup.object().shape({\n        food_title: Yup.string().required(\"Meal name is required\"),\n        food_description: Yup.string().required(\n          \"Your meal deserves a description\"\n        ),\n        food_price: Yup.number().required(\"Give your meal a price\"),\n        prepare_time: Yup.number().required(\"Set a time to prepare the meal\"),\n        // image: Yup.mixed()\n        //   .nullable()\n        //   .required(\"A file is required\")\n        //   .test(\n        //     \"Fichier taille\",\n        //     \"upload file\",\n        //     (value) => !value || (value && value.size <= 1024 * 1024)\n        //   )\n        //   .test(\n        //     \"format\",\n        //     \"upload file\",\n        //     (value) =>\n        //       !value || (value && SUPPORTED_FORMATS.includes(value.type))\n        //   ),\n      })}\n    >\n      {(props) => {\n        const {\n          values,\n          touched,\n          errors,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        } = props;\n        return (\n          <div className=\"menu-section\">\n            <form onSubmit={handleSubmit}>\n              <div className=\"menu-title\">\n                <div className=\"menu-title-header\">\n                  <h2>Add Meal</h2>\n                </div>\n                <button type=\"submit\" className=\"menu-btn\">\n                  {loading ? <Preloader /> : \"Save Meal\"}\n                </button>\n              </div>\n              <div className=\"menu-table\">\n                <div className=\"menu-table-inner\">\n                  <div className=\"menu-table-row\">\n                    <div className=\"menu-input\">\n                      <label>\n                        <h4>NAME</h4>\n                      </label>\n                      <input\n                        id=\"food_title\"\n                        name=\"food_title\"\n                        value={values.food_title}\n                        type=\"text\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        placeholder=\"Name\"\n                        className={\n                          errors.food_title && touched.food_title && \"error\"\n                        }\n                      />\n                      {errors.food_title && touched.food_title && (\n                        <div className=\"input-feedback\">\n                          {errors.food_title}\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"menu-input\">\n                      <label>\n                        <h4>CATEGORIES</h4>\n                      </label>\n                      {/* Design a Custom DropDown after Launch */}\n                      <select\n                        id=\"food_type\"\n                        name=\"food_type\"\n                        value={values.food_type}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                      >\n                        <option value=\"\"></option>\n                        <option value=\"main-dish\">Main Dish</option>\n                        <option value=\"side-dish\">Side Dish</option>\n                      </select>\n                    </div>\n\n                    <div className=\"menu-input\">\n                      <label>\n                        <h4>PRICE (NGN)</h4>\n                      </label>\n                      <input\n                        id=\"food_price\"\n                        name=\"food_price\"\n                        type=\"digit\"\n                        value={values.food_price}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        placeholder=\"Price\"\n                        className={\n                          errors.food_price && touched.food_price && \"error\"\n                        }\n                      />\n                      {errors.food_price && touched.food_price && (\n                        <div className=\"input-feedback\">\n                          {errors.food_price}\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"menu-input-img\">\n                      <h4>Import Meal Image</h4>\n                      <div className=\"labels\">\n                        <label\n                          htmlFor=\"Image1\"\n                          className={isImageUploaded ? \"uploaded\" : \"\"}\n                        >\n                          <input\n                            id=\"Image1\"\n                            name=\"image\"\n                            value={values.image}\n                            type=\"file\"\n                            accept=\"image/*\"\n                            style={{ display: \"none\" }}\n                            onChange={handleImageUpload}\n                          ></input>\n                          {showImage && (\n                            <div className=\"img-display\">\n                              {isImageUploaded && (\n                                <img\n                                  src={URL.createObjectURL(file)}\n                                  alt=\"food-img\"\n                                />\n                              )}\n                              {!isImageUploaded && (\n                                <img src={values.image} alt=\"food-img\" />\n                              )}\n                            </div>\n                          )}\n                          <label htmlFor=\"Image1\">\n                            <img\n                              src={icon}\n                              alt={icon}\n                              className=\"menu-inputImg\"\n                            />\n                          </label>\n                        </label>\n                      </div>\n                      {/* <label>\n                        <p className=\"menu-small\">Image should be 2mb max</p>\n                      </label> */}\n                    </div>\n                  </div>\n                  <div className=\"menu-table-row second\">\n                    <div className=\"menu-input\">\n                      <label>\n                        <h4>DESCRIPTION</h4>\n                      </label>\n                      <textarea\n                        id=\"food_description\"\n                        name=\"food_description\"\n                        value={values.food_description}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        placeholder=\"Meal Description\"\n                        className={\n                          errors.food_description &&\n                          touched.food_description &&\n                          \"error\"\n                        }\n                      ></textarea>\n                      {errors.food_description && touched.food_description && (\n                        <div className=\"input-feedback\">\n                          {errors.food_description}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"menu-input\">\n                      <label>\n                        <h4>PREPARATION TIME (minutes)</h4>\n                      </label>\n                      <input\n                        id=\"prepare_time\"\n                        name=\"prepare_time\"\n                        value={values.prepare_time}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        type=\"digit\"\n                        placeholder=\"Preparation Time\"\n                        className={\n                          errors.prepare_time && touched.prepare_time && \"error\"\n                        }\n                      />\n                      {errors.prepare_time && touched.prepare_time && (\n                        <div className=\"input-feedback\">\n                          {errors.prepare_time}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"menu-input\">\n                      <label>\n                        <h4>Delivery Type</h4>\n                      </label>\n                      <select\n                        value={values.delivery_type}\n                        name=\"delivery_type\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                      >\n                        <option value=\"\">..</option>\n                        <option value=\"Instant Delivery\">\n                          Instant Delivery\n                        </option>\n                      </select>\n                    </div>\n\n                    <div className=\"menu-input\">\n                      <label>\n                        <h4>Meal Category</h4>\n                      </label>\n                      <select\n                        name=\"category_id\"\n                        value={values.category_id}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                      >\n                        {category.map((meal) => {\n                          return (\n                            <option key={meal.id} value={meal.id}>\n                              {meal.title}\n                            </option>\n                          );\n                        })}\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </form>\n          </div>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddMenu;\n","import Swal from \"sweetalert2\";\n\n/**\n * Reusable Notification Bar\n * @param {*} text  the text content\n * @param {*} icon  \"info\" | \"warning\" | \"success\" | \"error\"\n */\n\nexport const showToastNotification = (text, icon) => {\n  Swal.fire({\n    text,\n    icon,\n    iconColor: \"#fff\",\n    toast: true,\n    position: \"top-right\",\n    showConfirmButton: false,\n    timer: 2000,\n    background: icon === \"error\" ? \"#ff0000\" : \"#ff8323\",\n    color: \"#fff\",\n  });\n};\n"],"names":["navigate","useNavigate","useState","loading","setLoading","category","setCategory","file","setFile","isImageUploaded","setIsImageUploaded","showImage","setShowImage","handleImageUpload","event","target","files","useEffect","authService","response","data","console","error","fetchCategory","length","initialValues","category_id","food_title","food_description","food_price","food_type","prepare_time","delivery_type","image","onSubmit","values","setSubmitting","formData","FormData","append","showToastNotification","log","validationSchema","Yup","shape","required","props","touched","errors","handleChange","handleBlur","handleSubmit","className","type","id","name","value","onChange","onBlur","placeholder","htmlFor","accept","style","display","src","URL","createObjectURL","alt","icon","map","meal","title","text","Swal","iconColor","toast","position","showConfirmButton","timer","background","color"],"sourceRoot":""}