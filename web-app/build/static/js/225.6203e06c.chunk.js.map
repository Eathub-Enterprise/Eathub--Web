{"version":3,"file":"static/js/225.6203e06c.chunk.js","mappings":"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","sources":["Pages/dashboard/pages/menu/EditMenu.jsx","helper/ToastNotify.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport authService from \"../../../../services/auth/authService\";\nimport { Formik } from \"formik\";\nimport icon from \"../../../../Assets/pngs/ImgUpload.png\";\nimport Preloader from \"../../../../layouts/Preloader/Preloader\";\nimport { showToastNotification } from \"../../../../helper/ToastNotify\";\n\nconst EditMenu = () => {\n  const { id } = useParams();\n  const [loading, setLoading] = useState(false);\n  const [mealItems, setMealItems] = useState({ image: \"\" });\n  const navigate = useNavigate();\n\n  // to grab the catgeories need for the Meal Category Select tag\n  const [category, setCategory] = useState([]);\n\n  // to update the value % state of an image into a file acceptable to the backend\n  const [file, setFile] = useState(\"\");\n  const [isImageUploaded, setIsImageUploaded] = useState(false);\n  const [showImage, setShowImage] = useState(false);\n  // The Method handling that\n  const handleImageUpload = (event) => {\n    setIsImageUploaded(true);\n    setFile(event.target.files[0]);\n    setShowImage(true);\n    // console.log(event.target.files[0]);\n  };\n\n  // This gets the category data from the backend\n  useEffect(() => {\n    async function fetchCategory() {\n      setLoading(true);\n      try {\n        const response = await authService.getMealCategory();\n        setCategory(response.data);\n      } catch (err) {\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchCategory();\n  }, []);\n\n  // This is to get the pre-existing data\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n      try {\n        const response = await authService.getMeal(id);\n        const meal = response.data;\n        // console.log(meal);\n        // setting the state\n        setMealItems({\n          category_id: meal.id,\n          food_title: meal.food_title,\n          food_description: meal.food_description,\n          food_price: meal.food_price,\n          food_type: meal.food_type,\n          prepare_time: meal.prepare_time,\n          delivery_type: meal.delivery_type,\n          image: \"\",\n        });\n      } catch (err) {\n        console.log(err);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchData();\n  }, [id]);\n\n  if (loading) {\n    <Preloader />;\n  }\n\n  if (category.length === 0) {\n    return <Preloader />;\n  }\n\n  if (mealItems.length === 0) {\n    return <Preloader />;\n  }\n\n  return (\n    <Formik\n      initialValues={mealItems}\n      onSubmit={async (values, { setSubmitting }) => {\n        setSubmitting(true);\n\n        const formData = new FormData();\n        // To send a form with a file, use this instead of JSON\n        formData.append(\"food_title\", values.food_title);\n        formData.append(\"food-type\", values.food_type);\n        formData.append(\"food_price\", values.food_price);\n        formData.append(\"image\", file);\n        formData.append(\"food_description\", values.food_description);\n        formData.append(\"prepare_time\", values.prepare_time);\n        formData.append(\"delivery_type\", values.delivery_type);\n        formData.append(\"category_id\", values.category_id);\n\n        /* Note: In the case where multiple Images would be needed, \n          ensure to append to formData instead of destructuring.*/\n\n        try {\n          setLoading(true);\n          await authService.updateMeal(id, formData).then(\n            (response) => {\n              // console.log(\"Update Inputted!\", formData);\n              if (response) {\n                showToastNotification(\n                  `${values.food_title} has been updated!`,\n                  \"success\"\n                );\n                navigate(\"/dashboard/menu\");\n                authService.getMealList();\n              } else {\n                console.log(\"There's an issue with it!\");\n                showToastNotification(`Error updating this meal`, \"error\");\n              }\n            },\n            (error) => {\n              console.log(\"The Values are wrong or Incorrect!: \", error);\n            }\n          );\n        } catch (err) {\n          console.log(\"Something seems to wrong with the request: \", err);\n        } finally {\n          setSubmitting(false);\n        }\n      }}\n      validator={() => ({})}\n    >\n      {(props) => {\n        const {\n          values,\n          touched,\n          errors,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        } = props;\n        return (\n          <div className=\"menu-section\">\n            <form onSubmit={handleSubmit}>\n              <div className=\"menu-title\">\n                <div className=\"menu-title-header\">\n                  <h2>Edit Meal</h2>\n                </div>\n                <button type=\"submit\" className=\"menu-btn\">\n                  Update Meal\n                </button>\n              </div>\n              <div className=\"menu-table\">\n                <div className=\"menu-table-inner\">\n                  <div className=\"menu-table-row\">\n                    <div className=\"menu-input\">\n                      <label>\n                        <h4>NAME</h4>\n                      </label>\n                      <input\n                        id=\"food_title\"\n                        name=\"food_title\"\n                        defaultValue={mealItems.food_title}\n                        type=\"text\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        placeholder=\"Name\"\n                        className={\n                          errors.food_title && touched.food_title && \"error\"\n                        }\n                      />\n                      {errors.food_title && touched.food_title && (\n                        <div className=\"input-feedback\">\n                          {errors.food_title}\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"menu-input\">\n                      <label>\n                        <h4>CATEGORIES</h4>\n                      </label>\n                      {/* Design a Custom DropDown after Launch */}\n                      <select\n                        id=\"food_type\"\n                        name=\"food_type\"\n                        defaultValue={mealItems.food_type}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                      >\n                        <option value=\"\"></option>\n                        <option value=\"main-dish\">Main Dish</option>\n                        <option value=\"side-dish\">Side Dish</option>\n                      </select>\n                    </div>\n\n                    <div className=\"menu-input\">\n                      <label>\n                        <h4>PRICE (NGN)</h4>\n                      </label>\n                      <input\n                        id=\"food_price\"\n                        name=\"food_price\"\n                        type=\"digit\"\n                        defaultValue={mealItems.food_price}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        placeholder=\"Price\"\n                        className={\n                          errors.food_price && touched.food_price && \"error\"\n                        }\n                      />\n                      {errors.food_price && touched.food_price && (\n                        <div className=\"input-feedback\">\n                          {errors.food_price}\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Look closely at my logic for this image input */}\n                    <div className=\"menu-input-img\">\n                      <h4>Import Meal Image</h4>\n                      <div className=\"labels\">\n                        <label\n                          htmlFor=\"Image1\"\n                          className={isImageUploaded ? \"uploaded\" : \"\"}\n                        >\n                          <input\n                            id=\"Image1\"\n                            name=\"image\"\n                            defaultValue={mealItems.image}\n                            type=\"file\"\n                            accept=\"image/*\"\n                            style={{ display: \"none\" }}\n                            onChange={handleImageUpload}\n                          ></input>\n                          {showImage && (\n                            <div className=\"img-display\">\n                              {isImageUploaded && (\n                                <img\n                                  src={URL.createObjectURL(file)}\n                                  alt=\"food-img\"\n                                />\n                              )}\n                              {!isImageUploaded && (\n                                <img src={values.image} alt=\"food-img\" />\n                              )}\n                            </div>\n                          )}\n                          <label htmlFor=\"Image1\">\n                            <img\n                              src={icon}\n                              alt={icon}\n                              className=\"menu-inputImg\"\n                            />\n                          </label>\n                        </label>\n                      </div>\n                      {/* <label>\n                        <p className=\"menu-small\">Image should be 2mb max</p>\n                      </label> */}\n                    </div>\n                  </div>\n                  <div className=\"menu-table-row second\">\n                    <div className=\"menu-input\">\n                      <label>\n                        <h4>DESCRIPTION</h4>\n                      </label>\n                      <textarea\n                        id=\"food_description\"\n                        name=\"food_description\"\n                        defaultValue={mealItems.food_description}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        placeholder=\"Meal Description\"\n                        className={\n                          errors.food_description &&\n                          touched.food_description &&\n                          \"error\"\n                        }\n                      ></textarea>\n                      {errors.food_description && touched.food_description && (\n                        <div className=\"input-feedback\">\n                          {errors.food_description}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"menu-input\">\n                      <label>\n                        <h4>PREPARATION TIME (minutes)</h4>\n                      </label>\n                      <input\n                        id=\"prepare_time\"\n                        name=\"prepare_time\"\n                        defaultValue={mealItems.prepare_time}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        type=\"digit\"\n                        placeholder=\"Preparation Time\"\n                        className={\n                          errors.prepare_time && touched.prepare_time && \"error\"\n                        }\n                      />\n                      {errors.prepare_time && touched.prepare_time && (\n                        <div className=\"input-feedback\">\n                          {errors.prepare_time}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"menu-input\">\n                      <label>\n                        <h4>Delivery Type</h4>\n                      </label>\n                      <select\n                        defaultValue={mealItems.delivery_type}\n                        name=\"delivery_type\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                      >\n                        <option value=\"\">..</option>\n                        <option value=\"Instant Delivery\">\n                          Instant Delivery\n                        </option>\n                      </select>\n                    </div>\n\n                    <div className=\"menu-input\">\n                      <label>\n                        <h4>Meal Category</h4>\n                      </label>\n                      <select\n                        name=\"category_id\"\n                        defaultValue={mealItems.category_id}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                      >\n                        {category.map((meal) => {\n                          return <option value={meal.id}>{meal.title}</option>;\n                        })}\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </form>\n          </div>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default EditMenu;\n","import Swal from \"sweetalert2\";\n\n/**\n * Reusable Notification Bar\n * @param {*} text  the text content\n * @param {*} icon  \"info\" | \"warning\" | \"success\" | \"error\"\n */\n\nexport const showToastNotification = (text, icon) => {\n  Swal.fire({\n    text,\n    icon,\n    iconColor: \"#fff\",\n    toast: true,\n    position: \"top-right\",\n    showConfirmButton: false,\n    timer: 2000,\n    background: icon === \"error\" ? \"#ff0000\" : \"#ff8323\",\n    color: \"#fff\",\n  });\n};\n"],"names":["id","useParams","useState","loading","setLoading","image","mealItems","setMealItems","navigate","useNavigate","category","setCategory","file","setFile","isImageUploaded","setIsImageUploaded","showImage","setShowImage","handleImageUpload","event","target","files","useEffect","authService","response","data","console","error","fetchCategory","meal","category_id","food_title","food_description","food_price","food_type","prepare_time","delivery_type","log","fetchData","length","initialValues","onSubmit","values","setSubmitting","formData","FormData","append","then","showToastNotification","validator","props","touched","errors","handleChange","handleBlur","handleSubmit","className","type","name","defaultValue","onChange","onBlur","placeholder","value","htmlFor","accept","style","display","src","URL","createObjectURL","alt","icon","map","title","text","Swal","iconColor","toast","position","showConfirmButton","timer","background","color"],"sourceRoot":""}